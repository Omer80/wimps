#include "mucalc.h"

/*Physical constants */
double PI = acos(-1.);
double Sigma_T = 6.65246 * pow(10,-25); /* Compton scattering crossections */
// double Sigma_x = Sigma_T * 3/4 //1.+x//x^3 //2 x /1+x////1+2 x/-Log[1+2 x]/+1//2 x/ Log[1+2 x]-/1+3 x///1+2 x/^2/;
double G = 6.6742 * pow(10,-8);/*cgs*/
double a = 7.5658 * pow(10,-15);/*radiation constant cgs*/
double c = 2.99792458 * pow(10,10);/*cm/s*/
double parsec = 3.0856776 * pow(10,18);/*cm*/
double mparsec = parsec * pow(10,6);/*cm*/
double Alpha_fs= 1.0/137.036;/* Fine structure constant */
double kb=1.3806505 * pow(10,-16);/*Boltzmann cgs*/
double hb=1.05457168* pow(10,-27);/*Planck/2\[Pi] cgs*/
// double h=2 * \[Pi]*hb;
double me= 9.1093826 * pow(10,-28);/*mass of electron g*/
double ev=1.60217646* pow(10,-12);
double GeV= ev * pow(10,9);
/*Helium fraction Y=0.24*/
double Nnu = 3.046; /* Number of neutrinos */

/*Cosmological  Parameters */

double TCMB = 2.725; /* CMB Temperature in K */
double Omega_b = 4.8999 * pow(10,-2); /* Baryon density */
double Omega_cdm = 2.6709 * pow(10,-1); /* Cold Dark matter density */
double h0 = 0.6711; /* Hubble parameter */
double fmHe = 0.24; /*Helium mass fraction */
double zmin = 200.0; /* Minimum redshift */

double Omega_m = Omega_cdm + Omega_b; /* Total Matter density */
double H0 = h0*100*3.24077649*pow(10,-20) ;/*s^-1*/
double fnu = Nnu * (7.0/8) *  pow((4/11),(4/3));
double zeq = (3 *pow((H0 * c),2) * Omega_m)/(8 * PI * G * a * pow(TCMB,4) * (1+fnu))-1;
double Omega_Lambda = 0.6825;
double Omega_r = 1 - (Omega_Lambda + Omega_m);/*Omega_m/(1+zeq);*/

double Rho_cr = (3 * pow(H0,2)) / (8 * PI * G);


double zmax = 5.0 * pow(10,6); /* Maximum redshift */



/* Dark matter annihilation example */

double mdm = (10 * GeV)/pow(c,2); /* Dark matter mass - !!!!! This will be eventually a function taking value from micOMEGAs */
double f_Gamma = 1; /* Fraction of energy that goes into particles with electromagnetic interaction and is deposited in the plasma */

/* Chemical potential calculation parameters from arXiv: 1203.2601v2 */
double C = 0.7768;
double B = 1.803;
double z_dC = 1.96 * pow(10,6);
double z_br = 1.05 * pow(10,7);
double z_eps = 3.67 * pow(10,5);
double eps = 0.0151;
double z_dC_prime = 7.11 * pow(10,6);
double z_br_prime = 5.41 * pow(10,11);

/* Integration functions */
extern double integrate_trapezoid(double (*integrand)(double),double min, double max, int subdivisions)
{
	double h = (max-min)/subdivisions;
	double s=0;
	for (int k=0; k < (subdivisions) ; k++)
	{
		s = s + (h/2) * ((*integrand)(min + k*h) + (*integrand)(min + (k+1)*h));
	}
	return s;
}

/*Romberg method integration */
// extern double integrate_romberg(double *function,double min, double max, double subdivisions)
// {
// 	double s[subdivisions];
// 	int i,k;
// 	double var ;
// 	for (i = 1; i< subdivisions; i++)
// 		s[i] = 1;
//  
// 	for (k=1; k< subdivisions ; k++)
// 	{
// 		for (i=1; i <=k; i++)
// 		{
// 			if (i==1)
// 			{
// 				var = s[i];
// 				s[i] = integrate_trapezoid(0, 1, pow(2, k-1));     // sub-routine trapeze 
// 			}                                       // integrated from 0 and 1
// 			/* pow() is the number of subdivisions*/
// 			else
// 			{
// 				s[k]= ( pow(4 , i-1)*s[i-1]-var )/(pow(4, i-1) - 1); 
//  
// 				var = s[i];
// 				s[i]= s[k];  
// 			}
// 		}
//  
// 		for (i=1; i <=k; i++)
// 			printf ("  %f  ", s[i]);
//  
// 		printf ("\n");
// 	}
//  
// 	return 0;
// }

/*Cosmological parameters functions */
extern double ndm_z(double z)
{
	double ndm = (Rho_cr * Omega_cdm / mdm) * pow((1+z),3);
	return ndm;
}

extern double H(double z)
{
	double H_z = H0 * pow((pow((1+z),3)*Omega_m + pow((1+z),4)*Omega_r + (1-(Omega_m+Omega_r))),0.5);
	return H_z;
}

/*WIMP cross section*/ 
extern double Sigma_v()
{
	double sigma_v = (3 * pow(10,-27))/ (Omega_cdm * pow(h0,2));
	return sigma_v;
}
/*Energy injection calculation from eq. (5.5) in arXiv: 1203.2601v2 */
extern double dQdz(double z) /* Energy injection rate */
{
	return f_Gamma * (mdm * pow(c,2) * pow(ndm_z(z),2) * Sigma_v())/(a * pow((TCMB * (1+z)),4) );
}

extern double dummy_energy_injection(double z) /* Energy injection for a fixed WIMP candidate as in arXiv: 1203.2601v2 */
{
	double epsilon_dot = 1.4 * pow(10,-29) * pow((1+z),2) * f_Gamma *(10/*GeV*/ / 10 /* WIMP mass in GeV*/) * ((Omega_cdm * pow(h0,2))/0.105 );
	return epsilon_dot;
}


/*Blackbody optical depth calculation from eq. (4.5) in arXiv: 1203.2601v2 */
extern double tau(double z)
{
	double first_part_tau_1, second_part_tau_1, tau_1,tau_2,tau_precise;
	first_part_tau_1 = pow(((1 + z)/(1 + z_dC)),5);
	second_part_tau_1 = pow(((1 + z)/(1 + z_br)),(5/2));
	tau_1 = pow((pow(((1 + z)/(1 + z_dC)),5) + pow(((1 + z)/(1 + z_br)),(5/2))),0.5);
	tau_2 = eps * log((pow(((1 + z)/(1 + z_eps)),(5/4)))+(pow((1 + pow(((1 + z)/(1 + z_eps)),(5/2))),(1/2))));
	tau_precise = (pow(((1+z)/(1+z_dC_prime)),3) + pow(((1+z)/(1+z_br_prime)),0.5));
	return 1.007 * (tau_1+tau_2) + tau_precise;
}

/*Chemical potential calculation from eq. (3.6) in arXiv: 1203.2601v2 */
extern double mu(double z)
{
	double first_part = 7.43 * pow(10,-5) * ((1 + z)/(2 * pow(10,6)));
	double second_part = 1.07 * pow(10,-6) * pow(((1 + z)/(2 * pow(10,6))), (-3/2));
	double value = pow((first_part + second_part),(1/2));
	return value;
}

extern double mu_integrand(double z)
{
	return (1/((1+z)*H(z)))* dQdz(z) * exp(-tau(z));
}

extern double mu_0(double z_i, double z_min, int subdivisions)
{
	double first_part = mu(z_i) * exp(-tau(z_i));
	double second_part = C*B*integrate_trapezoid((&mu_integrand),z_min, z_i, subdivisions);
	return first_part+second_part;
}

extern double test_function(double z)
{
	return log(-z);
}
inline extern double int_lan(double min, double max) 
{return (max*(log(max)-1))-(min*(log(min)-1));}

int main()
{
	double z = pow(10,5);
	printf("***************** Values used for energy calculation ********************\n");
	printf("H0 - %.2e \n", H0);
	printf("zeq - %.2e \n", zeq);
	printf("Omega_m - %.2e \n", Omega_m);
	printf("Omega_r - %.2e \n", Omega_r);
	printf("Omega_Lambda - %.2e \n", Omega_Lambda);
	printf("Rho_cr - %.2e \n", Rho_cr);
	printf("mdm - %.2e \n", mdm);
	printf("The H_z - is %.2e \n",H(z));
	printf("The ndm_z is %.2e \n",ndm_z(z));
	printf("The sigma_v is %.2e \n",Sigma_v());
	printf("The tau is %.2e \n",tau(z));
	printf("*************************************************************************\n");
	double value = dQdz(z) * ( exp(-tau(z))/ H(z));
	printf("For redshift %.2e ", z);
	printf("the energy injection is %.2e \n",value);
	double value_paper = dummy_energy_injection(z)* ( exp (-tau(z))/ H(z));
	printf("While the calculation as in the paper is %.2e \n", value_paper);
	double z_min = 5 * pow(10,4);
	double z_i = 6 * pow(10,6);
	int subdivisions = 1000;
	value = mu_0(z_i, z_min, subdivisions);
	printf("Mu at our time is  %.2e \n", value);
	value = integrate_trapezoid((&test_function),1, 10, 1000);
	double right_value = int_lan(1,10);
	value = value;
	printf("The numerical is  %.2e ", value);
	printf("and the analytical is %.2e \n", right_value);
	return 0;
}

